name: CI

# We don't want pushes (or PRs) to gh-pages to kick anything off
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  #
  # Run all tests on Conda on both Windows and macOS
  #
  CondaTests:
    name: Conda Tests ${{ matrix.os }} ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8]
        os: [macOS, Windows]

    steps:
    # We check out only a limited depth and then pull tags to save time
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        fetch-depth: 100

    - name: Get tags
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    - name: Setup caching
      uses: actions/cache@v2.1.5
      with:
        path: ~/conda_pkgs_dir
        key: ${{ runner.os }}-${{ matrix.python-version}}-conda-tests-${{ hashFiles('ci/*') }}
        restore-keys: ${{ runner.os }}-${{ matrix.python-version}}-conda-tests

    - name: Set up Python ${{ matrix.python-version }}
      uses: goanpeca/setup-miniconda@v1
      with:
        auto-update-conda: true
        miniconda-version: "latest"
        python-version: ${{ matrix.python-version }}
        channel-priority: strict
        channels: conda-forge/label/testing,conda-forge
        show-channel-urls: true
        # Needed for caching
        use-only-tar-bz2: true

    - name: Adjust dependencies for Windows
      if: ${{ runner.os == 'Windows' }}
      run: sed -e "s/scipy==.*/scipy==1.5.0/" -i'' ci/Current.txt

    - name: Install dependencies
      run: conda install --quiet --yes --file ci/test_requirements.txt --file ci/extra_requirements.txt --file ci/Current.txt

    - name: Install
      # For some reason on Windows 3.7 building the wheel fails to properly include our extra
      # stuff. Executing the egg_info beforehand for some reason fixes it. No idea why. We're
      # deep in territory where googling for answers helps not at all.
      run: |
        python setup.py egg_info
        python -m pip install --no-deps .

    - name: Run tests
      run: |
        export TEST_DATA_DIR=$GITHUB_WORKSPACE/staticdata
        python -m pytest --mpl -W error::metpy.deprecation.MetpyDeprecationWarning --cov=metpy --cov=tests --cov-report=xml

    - name: Run doctests
      # Windows produces some slightly different types that causes doctests to fail
      if: ${{ runner.os != 'Windows' }}
      env:
        PY_IGNORE_IMPORTMISMATCH: 1
      run: python -m pytest --doctest-modules -k "not test" src;

    - name: Upload test images
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: conda-${{ matrix.python-version }}-${{ runner.os }}-images
        path: test_output/

    - name: Upload coverage
      uses: codecov/codecov-action@v1

  #
  # Run all tests on Linux using standard PyPI packages, including min and pre-releases
  #
  PyPITests:
    name: PyPI Tests ${{ matrix.python-version }} ${{ matrix.dep-versions }}
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]
        dep-versions: [Current.txt]
        git-versions: ['']
        experimental: [false]
        include:
          - python-version: 3.6
            dep-versions: Minimum
            git-versions: ''
            experimental: false
          - python-version: 3.8
            dep-versions: Prerelease
            git-versions: 'git+git://github.com/hgrecco/pint@master#egg=pint git+git://github.com/pydata/xarray@master#egg=xarray'
            experimental: true

    steps:
    # We check out only a limited depth and then pull tags to save time
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        fetch-depth: 100

    - name: Get tags
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    # This uses pip to find the right cache dir and then sets up caching for it
    - name: Get cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"

    - name: Setup caching
      uses: actions/cache@v2.1.5
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-tests-${{ hashFiles('ci/*') }}
        restore-keys: ${{ runner.os }}-pip-tests

    # This installs the stuff needed to build and install Shapely and CartoPy from source.
    # Need to install numpy first to make CartoPy happy.
    - name: Install dependencies
      run: |
        sudo apt-get install libgeos-dev libproj-dev
        python -m pip install --upgrade pip setuptools
        python -m pip install --no-binary :all: shapely
        python -m pip install -c ci/${{ matrix.dep-versions }} numpy
        python -m pip install -r ci/test_requirements.txt -r ci/extra_requirements.txt -c ci/${{ matrix.dep-versions }} ${{ matrix.git-versions }}

    - name: Install
      run: python -m pip install -c ci/${{ matrix.dep-versions }} .

    - name: Run tests
      run: |
        export TEST_DATA_DIR=$GITHUB_WORKSPACE/staticdata
        export NUMPY_EXPERIMENTAL_ARRAY_FUNCTION=1
        python -m pytest --mpl -W error::metpy.deprecation.MetpyDeprecationWarning --cov=metpy --cov=tests --cov-report=xml

    - name: Run doctests
      if: ${{ matrix.dep-versions == 'Current.txt' }}
      env:
        PY_IGNORE_IMPORTMISMATCH: 1
      run: python -m pytest --doctest-modules -k "not test" src;

    - name: Upload test images
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: pypi-${{ matrix.python-version }}-${{ matrix.dep-versions }}-images
        path: test_output/

    - name: Upload coverage
      uses: codecov/codecov-action@v1

  #
  # Build our docs on Linux against multiple Pythons, including pre-releases
  #
  Docs:
    name: Docs ${{ matrix.python-version }} ${{ matrix.dep-versions }}
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7]
        linkcheck: ['']
        dep-versions: [Current.txt]
        git-versions: ['']
        experimental: [false]
        include:
          - python-version: 3.8
            linkcheck: linkcheck
            dep-versions: Current.txt
            git-versions: ''
            experimental: false
          - python-version: 3.8
            linkcheck: ''
            dep-versions: Prerelease
            git-versions: 'git+git://github.com/hgrecco/pint@master#egg=pint git+git://github.com/pydata/xarray@master#egg=xarray'
            experimental: true

    steps:
    # We check out only a limited depth and then pull tags to save time
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        fetch-depth: 100

    - name: Get tags
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    # This uses pip to find the right cache dir and then sets up caching for it
    - name: Get cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"

    - name: Setup cache
      uses: actions/cache@v2.1.5
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-docs-${{ hashFiles('ci/*') }}
        restore-keys: ${{ runner.os }}-pip-docs

    # This installs the stuff needed to build and install Shapely and CartoPy from source.
    # Need to install numpy first to make CartoPy happy.
    - name: Install dependencies (PyPI)
      if: ${{ runner.os == 'Linux' }}
      run: |
        sudo apt-get install libgeos-dev libproj-dev
        python -m pip install --upgrade pip setuptools
        python -m pip install --no-binary :all: shapely
        python -m pip install -c ci/${{ matrix.dep-versions }} numpy
        python -m pip install -r ci/doc_requirements.txt -r ci/extra_requirements.txt -c ci/${{ matrix.dep-versions }} ${{ matrix.git-versions }}
        python -m pip install -f https://unidata-python.s3.amazonaws.com/wheelhouse/index.html sphinx_rtd_theme==0.2.5b1.post1

    - name: Install self
      run: python -m pip install -c ci/${{ matrix.dep-versions }} .

    - name: Build docs
      run: |
        export TEST_DATA_DIR=$GITHUB_WORKSPACE/staticdata
        pushd docs
        make overridecheck html ${{ matrix.linkcheck }} O=-W
        popd

    - name: Upload docs as artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.python-version }}-docs
        path: |
          docs/build/html
          !docs/_static/*.pdf
